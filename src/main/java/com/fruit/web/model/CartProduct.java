package com.fruit.web.model;

import com.fruit.web.model.base.BaseCartProduct;
import com.fruit.web.model.base.BaseProduct;
import com.fruit.web.util.Common;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Record;

import java.sql.SQLException;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class CartProduct extends BaseCartProduct<CartProduct> {
    public static final CartProduct dao = new CartProduct().dao();
    private StringBuilder sql;

    /**
     * 删除购物车商品
     *
     * @param uid
     * @param ids
     */
    public boolean removeCartProduct(int uid, Integer[] ids) {
        return Db.tx(new IAtom() {
            @Override
            public boolean run(){
                try {
                    Db.update("delete from b_cart_product where uid=? and product_standard_id in (" + Common.arrayToSqlIn(ids) + ") ", uid);
                    return true;
                } catch (Exception e) {
                    e.printStackTrace();
                    return false;
                }
            }
        });
    }

    /**
     * 添加购物车商品(和之前的商品数量累加),数量为整数为增加商品数量,数量为负数可以去除指定的商品数量(不会出现商品数量为负的情况)
     * @param uid
     * @param standardId
     * @param buyNum
     * @param remark
     */
    public void addProduct(int uid, int standardId, int buyNum, String remark) {
        StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO b_cart_product(uid, product_standard_id, buy_num, remark, create_time, update_time) ")
                .append("VALUES (?,?,?,?,NOW(),NOW()) ")
                .append("ON DUPLICATE KEY UPDATE buy_num= buy_num + ?, remark=?, update_time=now()");
        Db.update(sql.toString(), uid, standardId, buyNum, remark, buyNum, remark);

    }


    /**
     * 添加或修改购物车商品(直接修改数量,不累加)
     *
     * @param uid
     * @param standardId
     * @param buyNum
     * @param remark
     */
    public void saveAndUpdateProduct(int uid, int standardId, int buyNum, String remark) {
        StringBuilder sql = new StringBuilder();

        sql.append("INSERT INTO b_cart_product(uid, product_standard_id, buy_num, remark, create_time, update_time) ")
                .append("VALUES (?,?,?,?,NOW(),NOW()) ")
                .append("ON DUPLICATE KEY UPDATE buy_num= ?, remark=?, update_time=now()");
        Db.update(sql.toString(), uid, standardId, buyNum, remark, buyNum, remark);
    }
}
